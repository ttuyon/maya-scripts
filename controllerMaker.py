import maya.cmds as cmds

def controllerMaker():
    winMemoryName = "syControllerMaker"
    
    if cmds.window(winMemoryName, exists=True):
        cmds.deleteUI(winMemoryName)
    
    cmds.window(winMemoryName, 
                resizeToFitChildren=True, 
                widthHeight=(200, 100), 
                title="Controller Maker")
    
    cmds.columnLayout(adjustableColumn=True, rowSpacing=8, margins=8)

    ############################## 커브 형태 선택
    cmds.frameLayout(label="Shape", collapsable=False)

    cmds.separator(style='none')

    cmds.rowColumnLayout(numberOfColumns=2, 
                         columnWidth=[(1, 120), (2, 120)],
                         columnSpacing=[(1, 2), (2, 2)],
                         rowSpacing=[(1, 4), (2, 4)])
    
    ctrlShapes = [
        "Circle",
        "Square",
        "Box",
        "Bended Cross Arrow",
        "Arrow",
        "Cross Arrow",
        "Circled Arrow",
        "Pin",
        "2 Sided Pin",
        "Cross Pin",
        "Sphere",
        "YoYo",
        "Cylinder",
        "Cone",
        "Two Arrow",
        "SquashArrow",
        "X_pin",
        "SpherePin",
        "CircleFourthArrow",
        "CircleTwoArrow",
        "Cross",
        "HalfSphere",
        "MovePin",
        "Check"
    ]

    shapeRadioCollection = cmds.radioCollection()

    for ctrlShape in ctrlShapes:
        cmds.radioButton(label=ctrlShape)
    
    cmds.setParent('..')
    cmds.setParent('..')

    ############################## 커브 색상 선택
    cmds.frameLayout(label="Color", collapsable=False, height=130)
    
    cmds.separator(style='none')

    cmds.gridLayout(numberOfRows=4, numberOfColumns=8, cellWidthHeight=(30, 20))
    
    colors = [
        (0.467, 0.467, 0.467), (0.000, 0.000, 0.000), (0.247, 0.247, 0.247), (0.498, 0.498, 0.498),
        (0.608, 0.000, 0.157), (0.000, 0.016, 0.373), (0.000, 0.000, 1.000), (0.000, 0.275, 0.094),
        (0.145, 0.000, 0.263), (0.780, 0.000, 0.780), (0.537, 0.278, 0.200), (0.243, 0.133, 0.122),
        (0.600, 0.145, 0.000), (1.000, 0.000, 0.000), (0.000, 1.000, 0.000), (0.000, 0.255, 0.600),
        (1.000, 1.000, 1.000), (1.000, 1.000, 0.000), (0.388, 0.863, 1.000), (0.263, 1.000, 0.635),
        (1.000, 0.686, 0.686), (0.890, 0.675, 0.475), (1.000, 1.000, 0.384), (0.000, 0.600, 0.325),
        (0.627, 0.412, 0.188), (0.620, 0.627, 0.188), (0.408, 0.627, 0.188), (0.188, 0.627, 0.365),
        (0.188, 0.627, 0.627), (0.188, 0.404, 0.627), (0.435, 0.188, 0.627), (0.627, 0.188, 0.412)
    ]
    
    for i, color in enumerate(colors):
        cmds.iconTextButton(
            backgroundColor=color,
            command=lambda *_, idx=i: onColorBtnClick(idx),
            highlightColor=(1, 0, 0)
        )
    
    cmds.setParent('..') 
    
    colorSlider = cmds.colorIndexSliderGrp(min=0, max=32, value=6)

    cmds.setParent('..') 

    ############################## 기타 옵션 선택
    cmds.frameLayout(label="Config", collapsable=False)
    
    cmds.separator(style='none')
    lockVisibilityCheckbox = cmds.checkBox(label="Lock Visibility", value=True)

    cmds.setParent('..') 

    ############################## 액션
    cmds.button(label="Create Controller", command=lambda *_: onCreateBtnClick())
    cmds.button(label="Change Selected Controller Color", command=lambda *_: onChangeColorBtnClick())

    cmds.setParent('..')

    cmds.showWindow(winMemoryName)

    def getSelectedColor():
        return cmds.colorIndexSliderGrp(colorSlider, query=True, value=True) - 1

    def onCreateBtnClick():
        selectedRadioBtn = cmds.radioCollection(shapeRadioCollection, query=True, select=True)
        shape = cmds.radioButton(selectedRadioBtn, query=True, label=True)
        color = getSelectedColor()
        lockVisibility = cmds.checkBox(lockVisibilityCheckbox, query=True, value=True)
        createController(shape, color, lockVisibility)
    
    def onChangeColorBtnClick():
        changeColor(getSelectedColor())
    
    def onColorBtnClick(index):
        cmds.colorIndexSliderGrp(colorSlider, edit=True, value=index + 1)

def createController(shape, color, lockVisibility):
    curve = createCurve(shape)
    changeColor(color, curve)
    cmds.setAttr(f'{curve}.v', lock=lockVisibility)

def changeColor(color, obj = None):
    selectedObjects = [obj] if obj is not None else cmds.ls(selection=True)
    
    for currentObject in selectedObjects:
        cmds.select(currentObject, replace=True)
        
        sourceConnection = cmds.connectionInfo(
            currentObject + ".drawOverride",
            sourceFromDestination=True
        )
        if sourceConnection:
            cmds.disconnectAttr(sourceConnection, currentObject + ".drawOverride")
        
        shapeNodes = cmds.listRelatives(currentObject, fullPath=True, shapes=True)
        
        if shapeNodes:
            shapeNode = shapeNodes[0]
            
            sourceConnection = cmds.connectionInfo(
                shapeNode + ".drawOverride",
                sourceFromDestination=True
            )
            if sourceConnection:
                cmds.disconnectAttr(sourceConnection, shapeNode + ".drawOverride")
            
            cmds.setAttr(shapeNode + ".overrideEnabled", 1)
            cmds.setAttr(shapeNode + ".overrideColor", color)

def createCurve(type):
    if type == "Circle":
        return cmds.circle(c=(0,0,0), nr=(0,1,0), sw=360, r=1, d=3, ut=0, tol=0.01, s=8, ch=0)
    
    if type == "Square":
        return cmds.curve(d=1, p=[(-1,0,-1), (-1,0,1), (1,0,1), (1,0,-1), (-1,0,-1)], 
                                             k=[0,1,2,3,4])
    if type == "Box":
        return cmds.curve(d=1, 
                    p=[(0.5,0.5,-0.5), (0.5,0.5,0.5), (0.5,-0.5,0.5), (0.5,-0.5,-0.5), (0.5,0.5,-0.5),
                       (-0.5,0.5,-0.5), (-0.5,-0.5,-0.5), (-0.5,-0.5,0.5), (-0.5,0.5,0.5), (0.5,0.5,0.5),
                       (0.5,-0.5,0.5), (-0.5,-0.5,0.5), (-0.5,-0.5,-0.5), (0.5,-0.5,-0.5), (0.5,0.5,-0.5),
                       (-0.5,0.5,-0.5), (-0.5,0.5,0.5), (0.5,0.5,0.5), (0.5,0.5,-0.5)],
                    k=[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8])

    if type == "Bended Cross Arrow":
        return cmds.curve(d=1,
                    p=[(0,0.35,-1.001567), (-0.336638,0.677886,-0.751175), (-0.0959835,0.677886,-0.751175),
                       (-0.0959835,0.850458,-0.500783), (-0.0959835,0.954001,-0.0987656), (-0.500783,0.850458,-0.0987656),
                       (-0.751175,0.677886,-0.0987656), (-0.751175,0.677886,-0.336638), (-1.001567,0.35,0),
                       (-0.751175,0.677886,0.336638), (-0.751175,0.677886,0.0987656), (-0.500783,0.850458,0.0987656),
                       (-0.0959835,0.954001,0.0987656), (-0.0959835,0.850458,0.500783), (-0.0959835,0.677886,0.751175),
                       (-0.336638,0.677886,0.751175), (0,0.35,1.001567), (0.336638,0.677886,0.751175),
                       (0.0959835,0.677886,0.751175), (0.0959835,0.850458,0.500783), (0.0959835,0.954001,0.0987656),
                       (0.500783,0.850458,0.0987656), (0.751175,0.677886,0.0987656), (0.751175,0.677886,0.336638),
                       (1.001567,0.35,0), (0.751175,0.677886,-0.336638), (0.751175,0.677886,-0.0987656),
                       (0.500783,0.850458,-0.0987656), (0.0959835,0.954001,-0.0987656), (0.0959835,0.850458,-0.500783),
                       (0.0959835,0.677886,-0.751175), (0.336638,0.677886,-0.751175), (0,0.35,-1.001567)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])

    if type == "Arrow":
        return cmds.curve(d=1,
                    p=[(-0.66,0,-0.33), (0,0,-0.33), (0,0,-0.66), (0.99,0,0), 
                       (0,0,0.66), (0,0,0.33), (-0.66,0,0.33), (-0.66,0,-0.33)],
                    k=[0,1,2,3,4,5,6,7])
    
    if type == "Cross Arrow":
        return cmds.curve(d=1,
                    p=[(0,0,-1.1025), (-0.33,0,-0.6075), (-0.165,0,-0.6075), (-0.165,0,-0.165),
                       (-0.6075,0,-0.165), (-0.6075,0,-0.33), (-1.1025,0,0), (-0.6075,0,0.33),
                       (-0.6075,0,0.165), (-0.165,0,0.165), (-0.165,0,0.6075), (-0.33,0,0.6075),
                       (0,0,1.1025), (0.33,0,0.6075), (0.165,0,0.6075), (0.165,0,0.165),
                       (0.6075,0,0.165), (0.6075,0,0.33), (1.1025,0,0), (0.6075,0,-0.33),
                       (0.6075,0,-0.165), (0.165,0,-0.165), (0.165,0,-0.6075), (0.33,0,-0.6075),
                       (0,0,-1.1025)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])

    if type == "Circled Arrow":
        return cmds.curve(d=1,
                    p=[(-1.084005,0,-0.092136), (-0.791121,0,-0.955956), (-0.707107,0,-0.707107),
                       (-0.570265,0,-0.843948), (-0.205819,0,-1.040044), (0.405223,0,-0.978634),
                       (0.881027,0,-0.588697), (1.059487,0,0), (0.881027,0,0.588697),
                       (0.405223,0,0.978634), (-0.205819,0,1.040044), (-0.570265,0,0.843948),
                       (-0.707107,0,0.707107), (-0.791121,0,0.955956), (-1.084005,0,0.092136),
                       (-0.315189,0,0.413069), (-0.540989,0,0.540989), (-0.436294,0,0.645682),
                       (-0.157467,0,0.79571), (0.310025,0,0.748727), (0.67405,0,0.450396),
                       (0.810585,0,0), (0.67405,0,-0.450396), (0.310025,0,-0.748727),
                       (-0.157467,0,-0.79571), (-0.436294,0,-0.645682), (-0.540989,0,-0.540989),
                       (-0.315189,0,-0.413069), (-1.084005,0,-0.092136), (-0.791121,0,-0.955956)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])

    if type == "Pin":
        return cmds.curve(d=1,
                    p=[(0,0,0), (0,1.2,0), (-0.235114,1.276393,0), (-0.380423,1.476393,0),
                       (-0.380423,1.723607,0), (-0.235114,1.923607,0), (0,2,0),
                       (0.235114,1.923607,0), (0.380423,1.723607,0), (0.380423,1.476393,0),
                       (0.235114,1.276393,0), (0,1.2,0)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11])
    
    if type == "2 Sided Pin":
        return cmds.curve(d=1,
                    p=[(0,-1.2,0), (-0.235114,-1.276393,0), (-0.380423,-1.476393,0),
                       (-0.380423,-1.723607,0), (-0.235114,-1.923607,0), (0,-2,0),
                       (0.235114,-1.923607,0), (0.380423,-1.723607,0), (0.380423,-1.476393,0),
                       (0.235114,-1.276393,0), (0,-1.2,0), (0,1.2,0),
                       (-0.235114,1.276393,0), (-0.380423,1.476393,0), (-0.380423,1.723607,0),
                       (-0.235114,1.923607,0), (0,2,0), (0.235114,1.923607,0),
                       (0.380423,1.723607,0), (0.380423,1.476393,0), (0.235114,1.276393,0),
                       (0,1.2,0)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])
    
    if type == "Cross Pin":
        return cmds.curve(d=1,
                    p=[(-1.2,0,0), (-1.276393,0.235114,0), (-1.476393,0.380423,0),
                       (-1.723607,0.380423,0), (-1.923607,0.235114,0), (-2,0,0),
                       (-1.923607,-0.235114,0), (-1.723607,-0.380423,0), (-1.476393,-0.380423,0),
                       (-1.276393,-0.235114,0), (-1.2,0,0), (0,0,0), (1.2,0,0),
                       (1.276393,0.235114,0), (1.476393,0.380423,0), (1.723607,0.380423,0),
                       (1.923607,0.235114,0), (2,0,0), (1.923607,-0.235114,0),
                       (1.723607,-0.380423,0), (1.476393,-0.380423,0), (1.276393,-0.235114,0),
                       (1.2,0,0), (0,0,0), (0,-1.2,0), (-0.235114,-1.276393,0),
                       (-0.380423,-1.476393,0), (-0.380423,-1.723607,0), (-0.235114,-1.923607,0),
                       (0,-2,0), (0.235114,-1.923607,0), (0.380423,-1.723607,0),
                       (0.380423,-1.476393,0), (0.235114,-1.276393,0), (0,-1.2,0),
                       (0,0,0), (0,1.2,0), (-0.235114,1.276393,0), (-0.380423,1.476393,0),
                       (-0.380423,1.723607,0), (-0.235114,1.923607,0), (0,2,0),
                       (0.235114,1.923607,0), (0.380423,1.723607,0), (0.380423,1.476393,0),
                       (0.235114,1.276393,0), (0,1.2,0)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46])
    
    if type == "Sphere":
        return cmds.curve(d=1,
                    p=[(0,1,0), (-0.382683,0.92388,0), (-0.707107,0.707107,0), (-0.92388,0.382683,0),
                       (-1,0,0), (-0.92388,-0.382683,0), (-0.707107,-0.707107,0), (-0.382683,-0.92388,0),
                       (0,-1,0), (0.382683,-0.92388,0), (0.707107,-0.707107,0), (0.92388,-0.382683,0),
                       (1,0,0), (0.92388,0.382683,0), (0.707107,0.707107,0), (0.382683,0.92388,0),
                       (0,1,0), (0,0.92388,0.382683), (0,0.707107,0.707107), (0,0.382683,0.92388),
                       (0,0,1), (0,-0.382683,0.92388), (0,-0.707107,0.707107), (0,-0.92388,0.382683),
                       (0,-1,0), (0,-0.92388,-0.382683), (0,-0.707107,-0.707107), (0,-0.382683,-0.92388),
                       (0,0,-1), (0,0.382683,-0.92388), (0,0.707107,-0.707107), (0,0.92388,-0.382683),
                       (0,1,0), (-0.382683,0.92388,0), (-0.707107,0.707107,0), (-0.92388,0.382683,0),
                       (-1,0,0), (-0.92388,0,0.382683), (-0.707107,0,0.707107), (-0.382683,0,0.92388),
                       (0,0,1), (0.382683,0,0.92388), (0.707107,0,0.707107), (0.92388,0,0.382683),
                       (1,0,0), (0.92388,0,-0.382683), (0.707107,0,-0.707107), (0.382683,0,-0.92388),
                       (0,0,-1), (-0.382683,0,-0.92388), (-0.707107,0,-0.707107), (-0.92388,0,-0.382683),
                       (-1,0,0)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52])
        
    if type == "YoYo":
        return cmds.curve(d=1,
                    p=[(0,0.5,0), (-1,0.5,0), (-0.707107,0.5,-0.707107), (0,0.5,-1), (0,0.5,0),
                       (0,0.5,-1), (0.707107,0.5,-0.707107), (1,0.5,0), (0,0.5,0),
                       (1,0.5,0), (0.707107,0.5,0.707107), (0,0.5,1), (0,0.5,0),
                       (0,0.5,1), (-0.707107,0.5,0.707107), (-1,0.5,0), (0,0.5,0),
                       (0,-0.5,0), (-1,-0.5,0), (-0.707107,-0.5,-0.707107), (0,-0.5,-1), (0,-0.5,0),
                       (0,-0.5,-1), (0.707107,-0.5,-0.707107), (1,-0.5,0), (0,-0.5,0),
                       (1,-0.5,0), (0.707107,-0.5,0.707107), (0,-0.5,1), (0,-0.5,0),
                       (0,-0.5,1), (-0.707107,-0.5,0.707107), (-1,-0.5,0)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])
    
    if type == "Cylinder":
        return cmds.curve(d=1,
                    p=[(-1,-0.5,0), (-0.707107,-0.5,-0.707107), (-0.707107,0.5,-0.707107), (-1,0.5,0),
                       (-1,-0.5,0), (-0.707107,-0.5,0.707107), (-0.707107,0.5,0.707107), (-1,0.5,0),
                       (-0.707107,0.5,0.707107), (0,0.5,1), (0,-0.5,1), (-0.707107,-0.5,0.707107),
                       (0,-0.5,1), (0.707107,-0.5,0.707107), (0.707107,0.5,0.707107), (0,0.5,1),
                       (0.707107,0.5,0.707107), (1,0.5,0), (1,-0.5,0), (0.707107,-0.5,0.707107),
                       (1,-0.5,0), (1,0.5,0), (0.707107,0.5,-0.707107), (0.707107,-0.5,-0.707107),
                       (1,-0.5,0), (0.707107,-0.5,-0.707107), (0,-0.5,-1), (0,0.5,-1),
                       (0.707107,0.5,-0.707107), (0,0.5,-1), (-0.707107,0.5,-0.707107),
                       (-0.707107,-0.5,-0.707107), (0,-0.5,-1)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])
    
    if type == "Cone":
        return cmds.curve(d=1,
                    p=[(0,0,-1), (0,2,0), (0,0,-1), (-0.707107,0,-0.707107), (0,2,0),
                       (-0.707107,0,-0.707107), (-1,0,0), (0,2,0), (-1,0,0),
                       (-0.707107,0,0.707107), (0,2,0), (-0.707107,0,0.707107), (0,0,1), (0,2,0),
                       (0,0,1), (0.707107,0,0.707107), (0,2,0), (0.707107,0,0.707107), (1,0,0), (0,2,0),
                       (1,0,0), (0.707107,0,-0.707107), (0,2,0), (0.707107,0,-0.707107), (0,0,-1), (0,2,0),
                       (0,0,-1), (-0.707107,0,-0.707107), (0,2,0), (-0.707107,0,-0.707107), (-1,0,0), (0,2,0)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])
    
    if type == "Two Arrow":
        return cmds.curve(d=1,
                    p=[(0.6075,0,-0.165), (-0.6075,0,-0.165), (-0.6075,0,-0.33), (-1.1025,0,0),
                       (-0.6075,0,0.33), (-0.6075,0,0.165), (0.6075,0,0.165), (0.6075,0,0.33),
                       (1.1025,0,0), (0.6075,0,-0.33), (0.6075,0,-0.165)],
                    k=[0,1,2,3,4,5,6,7,8,9,10])
    
    if type == "SquashArrow":
        return cmds.curve(d=1,
                    p=[(0,0,-4.433339), (0,-0.938749,-4.183931), (0,0,-5.578574), (0,0.938749,-4.183931),
                       (0,0,-4.433339), (0,0,4.433339), (0,0.938749,4.183931), (0,0,5.578574),
                       (0,-0.938749,4.183931), (0,0,4.433339), (0,0,0), (0,-4.467238,0),
                       (0,-4.467238,0.469375), (0,-4.467238,-0.469375), (0,-4.467238,0), (0,4.467238,0),
                       (0,4.467238,0.469375), (0,4.467238,-0.469375), (0,4.467238,0), (0,0,0),
                       (4.070779,0,0), (4.070779,0,-0.346735), (4.070779,0,0.346735), (4.070779,0,0),
                       (-4.070779,0,0), (-4.070779,0,0.346735), (-4.070779,0,-0.346735)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])

    if type == "X_pin":
        return cmds.curve(d=1,
                    p=[(0,0.0630775,0), (-0.037076,0.0510308,0), (-0.0599903,0.0194921,0),
                       (-0.0599903,-0.0194921,0), (-0.037076,-0.0510308,0), (0,-0.0630775,0),
                       (0.037076,-0.0510308,0), (0.0599903,-0.0194921,0), (0.0599903,0.0194921,0),
                       (0.037076,0.0510308,0), (0,0.0630775,0), (-0.037076,0.0510308,0),
                       (0.037076,-0.0510308,0), (0.0599903,-0.0194921,0), (0.0599903,0.0194921,0),
                       (0.037076,0.0510308,0), (-0.037076,-0.0510308,0), (-0.0599903,-0.0194921,0),
                       (-0.0599903,0.0194921,0), (-0.037076,0.0510308,0), (0,0.0630775,0),
                       (0,1.178956,0), (-0.298706,1.276011,0), (-0.483317,1.530106,0),
                       (-0.483317,1.844184,0), (-0.298706,2.098279,0), (0,2.195334,0),
                       (0.298706,2.098279,0), (0.483317,1.844184,0), (0.483317,1.530106,0),
                       (0.298706,1.276011,0), (0,1.178956,0), (-0.298706,1.276011,0),
                       (0.298706,2.098279,0), (0.483317,1.844184,0), (0.483317,1.530106,0),
                       (0.298706,1.276011,0), (-0.298706,2.098279,0)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37])
    
    if type == "SpherePin":
        return cmds.curve(d=1,
                    p=[(0,-1.042352,0), (-0.108792,-1.053067,-3.8907e-008), (-0.213403,-1.0848,-7.63188e-008),
                       (-0.309813,-1.136333,-1.10798e-007), (-0.394317,-1.205683,-1.41019e-007),
                       (-0.463667,-1.290187,-1.6582e-007), (-0.5152,-1.386597,-1.8425e-007),
                       (-0.546933,-1.491208,-1.95598e-007), (-0.557648,-1.6,-1.99431e-007),
                       (-0.546933,-1.708792,-1.95598e-007), (-0.5152,-1.813403,-1.8425e-007),
                       (-0.463667,-1.909813,-1.6582e-007), (-0.394317,-1.994317,-1.41019e-007),
                       (-0.309813,-2.063667,-1.10798e-007), (-0.213403,-2.1152,-7.63188e-008),
                       (-0.108792,-2.146933,-3.8907e-008), (0,-2.157648,0), (0.108792,-2.146933,0),
                       (0.213403,-2.1152,0), (0.309813,-2.063667,0), (0.394317,-1.994317,0),
                       (0.463667,-1.909813,0), (0.5152,-1.813403,0), (0.546933,-1.708792,0),
                       (0.557648,-1.6,0), (0.546933,-1.491208,0), (0.5152,-1.386597,0),
                       (0.463667,-1.290187,0), (0.394317,-1.205683,0), (0.309813,-1.136333,0),
                       (0.213403,-1.0848,0), (0.108792,-1.053067,0), (0,-1.042352,0),
                       (-1.62112e-008,-1.053067,0.108792), (-3.17995e-008,-1.0848,0.213403),
                       (-4.61657e-008,-1.136333,0.309813), (-5.87578e-008,-1.205683,0.394317),
                       (-6.90918e-008,-1.290187,0.463667), (-7.67707e-008,-1.386597,0.5152),
                       (-8.14994e-008,-1.491208,0.546933), (-8.3096e-008,-1.6,0.557648),
                       (-8.14994e-008,-1.708792,0.546933), (-7.67707e-008,-1.813403,0.5152),
                       (-6.90918e-008,-1.909813,0.463667), (-5.87578e-008,-1.994317,0.394317),
                       (-4.61657e-008,-2.063667,0.309813), (-3.17995e-008,-2.1152,0.213403),
                       (-1.62112e-008,-2.146933,0.108792), (0,-2.157648,0),
                       (5.51182e-008,-2.146933,-0.108792), (1.08118e-007,-2.1152,-0.213403),
                       (1.56963e-007,-2.063667,-0.309813), (1.99776e-007,-1.994317,-0.394317),
                       (2.34912e-007,-1.909813,-0.463667), (2.6102e-007,-1.813403,-0.5152),
                       (2.77098e-007,-1.708792,-0.546933), (2.82527e-007,-1.6,-0.557648),
                       (2.77098e-007,-1.491208,-0.546933), (2.6102e-007,-1.386597,-0.5152),
                       (2.34912e-007,-1.290187,-0.463667), (1.99776e-007,-1.205683,-0.394317),
                       (1.56963e-007,-1.136333,-0.309813), (1.08118e-007,-1.0848,-0.213403),
                       (5.51182e-008,-1.053067,-0.108792), (0,-1.042352,0),
                       (-1.62112e-008,-1.053067,0.108792), (-3.17995e-008,-1.0848,0.213403),
                       (-4.61657e-008,-1.136333,0.309813), (-5.87578e-008,-1.205683,0.394317),
                       (-6.90918e-008,-1.290187,0.463667), (-7.67707e-008,-1.386597,0.5152),
                       (-8.14994e-008,-1.491208,0.546933), (-8.3096e-008,-1.6,0.557648),
                       (0.213403,-1.6,0.5152), (0.394317,-1.6,0.394317), (0.5152,-1.6,0.213403),
                       (0.557648,-1.6,0), (0.5152,-1.6,-0.213402), (0.394317,-1.6,-0.394317),
                       (0.213403,-1.6,-0.5152), (2.82527e-007,-1.6,-0.557648),
                       (-0.213402,-1.6,-0.5152), (-0.394317,-1.6,-0.394317), (-0.5152,-1.6,-0.213403),
                       (-0.557648,-1.6,-1.99431e-007), (-0.5152,-1.6,0.213403),
                       (-0.394317,-1.6,0.394317), (-0.213403,-1.6,0.5152), (-8.3096e-008,-1.6,0.557648),
                       (-8.14994e-008,-1.491208,0.546933), (-7.67707e-008,-1.386597,0.5152),
                       (-6.90918e-008,-1.290187,0.463667), (-5.87578e-008,-1.205683,0.394317),
                       (-4.61657e-008,-1.136333,0.309813), (-3.17995e-008,-1.0848,0.213403),
                       (-1.62112e-008,-1.053067,0.108792), (0,-1.042352,0),
                       (0,1.042352,0), (-1.62112e-008,1.053067,0.108792), (-3.17995e-008,1.0848,0.213403),
                       (-4.61657e-008,1.136333,0.309813), (-5.87578e-008,1.205683,0.394317),
                       (-6.90918e-008,1.290187,0.463667), (-7.67707e-008,1.386597,0.5152),
                       (-8.14994e-008,1.491208,0.546933), (-8.3096e-008,1.6,0.557648),
                       (-8.14994e-008,1.708792,0.546933), (-7.67707e-008,1.813403,0.5152),
                       (-6.90918e-008,1.909813,0.463667), (-5.87578e-008,1.994317,0.394317),
                       (-4.61657e-008,2.063667,0.309813), (-3.17995e-008,2.1152,0.213403),
                       (-1.62112e-008,2.146933,0.108792), (0,2.157648,0),
                       (5.51182e-008,2.146933,-0.108792), (1.08118e-007,2.1152,-0.213403),
                       (1.56963e-007,2.063667,-0.309813), (1.99776e-007,1.994317,-0.394317),
                       (2.34912e-007,1.909813,-0.463667), (2.6102e-007,1.813403,-0.5152),
                       (2.77098e-007,1.708792,-0.546933), (2.82527e-007,1.6,-0.557648),
                       (2.77098e-007,1.491208,-0.546933), (2.6102e-007,1.386597,-0.5152),
                       (2.34912e-007,1.290187,-0.463667), (1.99776e-007,1.205683,-0.394317),
                       (1.56963e-007,1.136333,-0.309813), (1.08118e-007,1.0848,-0.213403),
                       (5.51182e-008,1.053067,-0.108792), (0,1.042352,0),
                       (-0.108792,1.053067,-3.8907e-008), (-0.213403,1.0848,-7.63188e-008),
                       (-0.309813,1.136333,-1.10798e-007), (-0.394317,1.205683,-1.41019e-007),
                       (-0.463667,1.290187,-1.6582e-007), (-0.5152,1.386597,-1.8425e-007),
                       (-0.546933,1.491208,-1.95598e-007), (-0.557648,1.6,-1.99431e-007),
                       (-0.546933,1.708792,-1.95598e-007), (-0.5152,1.813403,-1.8425e-007),
                       (-0.463667,1.909813,-1.6582e-007), (-0.394317,1.994317,-1.41019e-007),
                       (-0.309813,2.063667,-1.10798e-007), (-0.213403,2.1152,-7.63188e-008),
                       (-0.108792,2.146933,-3.8907e-008), (0,2.157648,0), (0.108792,2.146933,0),
                       (0.213403,2.1152,0), (0.309813,2.063667,0), (0.394317,1.994317,0),
                       (0.463667,1.909813,0), (0.5152,1.813403,0), (0.546933,1.708792,0),
                       (0.557648,1.6,0), (0.546933,1.491208,0), (0.5152,1.386597,0),
                       (0.463667,1.290187,0), (0.394317,1.205683,0), (0.309813,1.136333,0),
                       (0.213403,1.0848,0), (0.108792,1.053067,0), (0,1.042352,0),
                       (-0.108792,1.053067,-3.8907e-008), (-0.213403,1.0848,-7.63188e-008),
                       (-0.309813,1.136333,-1.10798e-007), (-0.394317,1.205683,-1.41019e-007),
                       (-0.463667,1.290187,-1.6582e-007), (-0.5152,1.386597,-1.8425e-007),
                       (-0.546933,1.491208,-1.95598e-007), (-0.557648,1.6,-1.99431e-007),
                       (-0.5152,1.6,0.213403), (-0.394317,1.6,0.394317), (-0.213403,1.6,0.5152),
                       (-8.3096e-008,1.6,0.557648), (0.213403,1.6,0.5152), (0.394317,1.6,0.394317),
                       (0.5152,1.6,0.213403), (0.557648,1.6,0), (0.5152,1.6,-0.213402),
                       (0.394317,1.6,-0.394317), (0.213403,1.6,-0.5152), (2.82527e-007,1.6,-0.557648),
                       (-0.213402,1.6,-0.5152), (-0.394317,1.6,-0.394317), (-0.5152,1.6,-0.213403),
                       (-0.557648,1.6,-1.99431e-007), (-0.5152,1.6,0.213403)],
                    k=list(range(187)))
    
    if type == "CircleFourthArrow":
        return cmds.curve(d=1,
                    p=[(-0.829101,0,0), (-0.552734,0,-0.276367), (-0.552734,0,-0.138183),
                       (-0.441818,0,-0.137043), (-0.423957,0,-0.188781), (-0.401797,0,-0.232003),
                       (-0.375293,0,-0.272706), (-0.344753,0,-0.310475), (-0.310483,0,-0.344895),
                       (-0.272791,0,-0.375539), (-0.232012,0,-0.401936), (-0.188698,0,-0.423916),
                       (-0.143351,0,-0.441316), (-0.138298,0,-0.442315), (-0.138183,0,-0.552734),
                       (-0.276367,0,-0.552734), (0,0,-0.829101), (0.276367,0,-0.552734),
                       (0.138183,0,-0.552734), (0.137999,0,-0.44299), (0.143351,0,-0.441316),
                       (0.188698,0,-0.423916), (0.232012,0,-0.401936), (0.272791,0,-0.375539),
                       (0.310483,0,-0.344895), (0.344753,0,-0.310475), (0.375293,0,-0.272706),
                       (0.401797,0,-0.232003), (0.423957,0,-0.188781), (0.441456,0,-0.143465),
                       (0.443506,0,-0.139942), (0.552734,0,-0.138183), (0.552734,0,-0.276367),
                       (0.829101,0,0), (0.552734,0,0.276367), (0.552734,0,0.138183),
                       (0.442935,0,0.138274), (0.441467,0,0.143425), (0.423976,0,0.188744),
                       (0.401827,0,0.231971), (0.375334,0,0.272682), (0.344803,0,0.310458),
                       (0.310537,0,0.344882), (0.272842,0,0.375523), (0.232053,0,0.401904),
                       (0.188725,0,0.423857), (0.143364,0,0.441223), (0.137942,0,0.442789),
                       (0.138183,0,0.552734), (0.276367,0,0.552734), (0,0,0.829101),
                       (-0.276367,0,0.552734), (-0.138183,0,0.552734), (-0.138193,0,0.442862),
                       (-0.143364,0,0.441223), (-0.188725,0,0.423857), (-0.232053,0,0.401904),
                       (-0.272842,0,0.375523), (-0.310537,0,0.344882), (-0.344803,0,0.310458),
                       (-0.375334,0,0.272682), (-0.401827,0,0.231971), (-0.423976,0,0.188744),
                       (-0.441467,0,0.143425), (-0.444323,0,0.135721), (-0.552734,0,0.138183),
                       (-0.552734,0,0.276367), (-0.829101,0,0)],
                    k=list(range(68)))
    
    if type == "CircleTwoArrow":
        return cmds.curve(d=1,
                    p=[(0,0,-0.829101), (0.276367,0,-0.552734), (0.138183,0,-0.552734),
                       (0.138183,0,-0.449322), (0.14534,0,-0.44736), (0.213562,0,-0.419105),
                       (0.276692,0,-0.380805), (0.333079,0,-0.333079), (0.380805,0,-0.276692),
                       (0.419105,0,-0.213561), (0.447359,0,-0.14534), (0.464927,0,-0.0736196),
                       (0.471035,0,-1.67216e-008), (0.464927,0,0.0736196), (0.447359,0,0.14534),
                       (0.419105,0,0.213561), (0.380805,0,0.276692), (0.333079,0,0.333079),
                       (0.276692,0,0.380805), (0.213562,0,0.419105), (0.14534,0,0.44736),
                       (0.138238,0,0.449568), (0.138238,0,0.554921), (0.276367,0,0.552734),
                       (0,0,0.829101), (-0.276367,0,0.552734), (-0.138183,0,0.552734),
                       (-0.138183,0,0.449329), (-0.14534,0,0.44736), (-0.213562,0,0.419105),
                       (-0.276692,0,0.380805), (-0.333079,0,0.333079), (-0.380805,0,0.276692),
                       (-0.419105,0,0.213561), (-0.447359,0,0.14534), (-0.464927,0,0.0736196),
                       (-0.471035,0,-1.65678e-008), (-0.464927,0,-0.0736196), (-0.447359,0,-0.14534),
                       (-0.419105,0,-0.213561), (-0.380805,0,-0.276692), (-0.333079,0,-0.333079),
                       (-0.276692,0,-0.380805), (-0.213562,0,-0.419105), (-0.14534,0,-0.44736),
                       (-0.138247,0,-0.448837), (-0.138183,0,-0.552734), (-0.276367,0,-0.552734),
                       (0,0,-0.829101)],
                    k=list(range(49)))
    
    if type == "Cross":
        return cmds.curve(d=1,
                    p=[(-1,0,-1), (-1,0,-3), (1,0,-3), (1,0,-1), (3,0,-1), (3,0,1),
                       (1,0,1), (1,0,3), (-1,0,3), (-1,0,1), (-3,0,1), (-3,0,-1), (-1,0,-1)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12])
    
    if type == "HalfSphere":
        return cmds.curve(d=1,
                    p=[(-0.999999,0,-3.27826e-007), (-0.980785,0,0.19509), (-0.923879,0,0.382683),
                       (-0.831469,0,0.55557), (-0.707107,0,0.707106), (-0.55557,0,0.831469),
                       (-0.382683,0,0.923879), (-0.19509,0,0.980785), (-1.63913e-007,0,1),
                       (-1.63123e-007,0.098017,0.995184), (-1.60763e-007,0.19509,0.980785),
                       (-1.56855e-007,0.290285,0.95694), (-1.51436e-007,0.382683,0.923879),
                       (-1.44558e-007,0.471397,0.881921), (-1.36288e-007,0.55557,0.831469),
                       (-1.26706e-007,0.634393,0.77301), (-1.15904e-007,0.707107,0.707107),
                       (-1.03985e-007,0.77301,0.634393), (-9.10651e-008,0.83147,0.55557),
                       (-7.72679e-008,0.881921,0.471397), (-6.27267e-008,0.92388,0.382683),
                       (-4.75814e-008,0.95694,0.290285), (-3.19778e-008,0.980785,0.19509),
                       (-1.60663e-008,0.995185,0.0980171), (0,1,0), (4.38171e-008,0.995185,-0.098017),
                       (8.72122e-008,0.980785,-0.19509), (1.29767e-007,0.95694,-0.290284),
                       (1.71073e-007,0.92388,-0.382683), (2.10731e-007,0.881921,-0.471396),
                       (2.48359e-007,0.83147,-0.55557), (2.83596e-007,0.77301,-0.634393),
                       (3.16101e-007,0.707107,-0.707106), (3.45563e-007,0.634393,-0.77301),
                       (3.71696e-007,0.55557,-0.831469), (3.9425e-007,0.471397,-0.88192),
                       (4.13006e-007,0.382683,-0.923879), (4.27786e-007,0.290285,-0.956939),
                       (4.38445e-007,0.19509,-0.980784), (4.44882e-007,0.098017,-0.995184),
                       (4.47035e-007,0,-0.999999), (-0.19509,0,-0.980784), (-0.382683,0,-0.923879),
                       (-0.555569,0,-0.831469), (-0.707106,0,-0.707106), (-0.831469,0,-0.55557),
                       (-0.923879,0,-0.382683), (-0.980785,0,-0.195091), (-0.999999,0,-3.27826e-007),
                       (-0.995184,0.098017,-3.26247e-007), (-0.980785,0.19509,-3.21526e-007),
                       (-0.95694,0.290285,-3.1371e-007), (-0.923879,0.382683,-3.02871e-007),
                       (-0.881921,0.471397,-2.89116e-007), (-0.831469,0.55557,-2.72577e-007),
                       (-0.77301,0.634393,-2.53413e-007), (-0.707106,0.707107,-2.31808e-007),
                       (-0.634393,0.77301,-2.0797e-007), (-0.55557,0.83147,-1.8213e-007),
                       (-0.471396,0.881921,-1.54536e-007), (-0.382683,0.92388,-1.25453e-007),
                       (-0.290284,0.95694,-9.51627e-008), (-0.19509,0.980785,-6.39556e-008),
                       (-0.0980171,0.995185,-3.21325e-008), (0,1,0), (0.0980171,0.995185,0),
                       (0.19509,0.980785,0), (0.290285,0.95694,0), (0.382683,0.92388,0),
                       (0.471397,0.881921,0), (0.55557,0.83147,0), (0.634393,0.77301,0),
                       (0.707107,0.707107,0), (0.77301,0.634393,0), (0.83147,0.55557,0),
                       (0.881921,0.471397,0), (0.92388,0.382683,0), (0.95694,0.290285,0),
                       (0.980785,0.19509,0), (0.995185,0.098017,0), (1,0,0),
                       (0.980784,0,-0.19509), (0.923879,0,-0.382683), (0.831469,0,-0.555569),
                       (0.707106,0,-0.707106), (0.55557,0,-0.831468), (0.382683,0,-0.923878),
                       (0.195091,0,-0.980784), (4.47035e-007,0,-0.999999), (0.195091,0,-0.980784),
                       (0.382683,0,-0.923878), (0.55557,0,-0.831468), (0.707106,0,-0.707106),
                       (0.831469,0,-0.555569), (0.923879,0,-0.382683), (0.980784,0,-0.19509),
                       (1,0,0), (0.980785,0,0.19509), (0.923879,0,0.382683), (0.831469,0,0.55557),
                       (0.707107,0,0.707107), (0.55557,0,0.83147), (0.382683,0,0.923879),
                       (0.19509,0,0.980785), (-1.63913e-007,0,1)],
                    k=list(range(105)))
    
    if type == "MovePin":
        return cmds.curve(d=1,
                    p=[(0,0.0500343,0), (-0.0500343,0,0), (0,-0.0500343,0), (0.0500343,0,0),
                       (0,0.0500343,0), (0,1.257438,0), (-0.120872,1.257438,0), (-0.120872,1.499182,0),
                       (-0.362616,1.499182,0), (-0.362616,1.740926,0), (-0.120872,1.740926,0),
                       (-0.120872,1.98267,0), (0.120872,1.98267,0), (0.120872,1.740926,0),
                       (0.362616,1.740926,0), (0.362616,1.499182,0), (0.120872,1.499182,0),
                       (0.120872,1.257438,0), (0,1.257438,0)],
                    k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])
    
    if type == "Check":
        return cmds.curve(d=1,
                    p=[(0,0,0), (0,0.643444,-0.643444), (0,0.321722,-0.965166), (0,0,-0.643444),
                       (0,-0.321722,-0.965166), (0,-0.643444,-0.643444), (0,0,0)],
                    k=[0,1,2,3,4,5,6])

controllerMaker()